Microsoft (R) Macro Assembler Version 14.29.30148.0	    03/18/23 23:36:49
example.asm						     Page 1 - 1


				; Assignment-07 Question02
				; Author:  Samuel George
				; Date:    3/17/23

				.586
				.MODEL FLAT

				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

 00000000			.DATA
 00000000 00000019		nbrArray DWORD  25, 47, 15, 50, 32
	   0000002F
	   0000000F
	   00000032
	   00000020

 00000014  00000028 [		string  BYTE    40 DUP (?)
	    00
	   ]
 0000003C 54 68 65 20 73	resultLbl BYTE  "The sum of the array is", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   61 72 72 61 79
	   20 69 73 00
 00000054  0000000B [		sum BYTE    11 DUP (?), 0
	    00
	   ] 00

 00000000			.CODE
 00000000			_MainProc PROC



 00000000  55			        push    ebp
 00000001  8B EC		        mov     ebp, esp
 00000003  83 EC 04		        sub     esp, 4

 00000006  8D 05 00000000 R	        lea     eax, nbrArray           ; address of array
 0000000C  50			        push    eax                     ; push pointer to array
 0000000D  6A 05		        push    5                       ; push size of array
 0000000F  E8 0000003C		        call    _arraySumProc           ; call the procedure we made for the array
				                

 00000014  8B C3		        mov     eax, ebx
				        
				        ;main procedure is displaying the sum using output macro

				        dtoa    sum, eax                ; convert to ASCII characters
				        output  resultLbl, sum          ; output label and sum
				        

 00000047  B8 00000000		        mov     eax, 0                  ; exit with return code 0
 0000004C  8B E5		        mov     esp, ebp
 0000004E  5D			        pop     ebp



 0000004F  C3			        ret
 00000050			_MainProc ENDP



				        ;addition procedure

 00000050			_arraySumProc PROC

 00000050  55			        push    ebp
 00000051  8B EC		        mov     ebp, esp
				        ;push    esi
				        ;push    edi


 00000053  8B 75 08		        mov     esi, DWORD PTR [ebp + 8]    ; pointer to array
 00000056  8B 7D 0C		        mov     edi, DWORD PTR [ebp + 12]   ; size of array

 00000059  B8 00000000		        mov     eax, 0                      ; initialize sum to 0
 0000005E  8B CF		        mov     ecx, edi                    

 00000060  83 FF 00		        cmp     edi, 0                      ; check if size is valid
 00000063  7E 08		        jle     _exit                       ; if the array has a negative or zero length size 

 00000065			_addition:                                  ; run loop if the array has a positive length... we hardcoded the array so we should be good
 00000065  03 C6		        add     eax, DWORD PTR esi
 00000067  83 C6 04		        add     esi, 4
 0000006A  49			        dec     ecx                         ; decreased by 4 since that is the increment
 0000006B  75 F8		        jnz     _addition                   ; to continue addition if not zero... until the array has added all values in its length

 0000006D			_exit:
 0000006D  5F			        pop     edi
 0000006E  5E			        pop     esi
 0000006F  8B E5		        mov     esp, ebp
 00000071  5D			        pop     ebp

 00000072  C3			        ret

 00000073			_arraySumProc ENDP

				END                             ; end of source code

Microsoft (R) Macro Assembler Version 14.29.30148.0	    03/18/23 23:36:49
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000060 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000073 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000050 Public
_arraySumProc  . . . . . . . . .	P Near	 00000050 _TEXT	Length= 00000023 Public
  _addition  . . . . . . . . . .	L Near	 00000065 _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 0000006D _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
nbrArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
resultLbl  . . . . . . . . . . .	Byte	 0000003C _DATA	
string . . . . . . . . . . . . .	Byte	 00000014 _DATA	
sum  . . . . . . . . . . . . . .	Byte	 00000054 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
